type Query {
  recipes(
    """
    Returns the first _n_ elements from the list.
    """
    first: Int

    """
    Returns the elements in the list that come after the specified cursor.
    """
    after: String

    """
    Returns the last _n_ elements from the list.
    """
    last: Int

    """
    Returns the elements in the list that come before the specified cursor.
    """
    before: String
  ): RecipesConnection
}

type Mutation {
  message(input: MessageInput!): MessagePayload!
}

type Subscription {
  messageChanged: String!
}

"""
A connection to a list of items.
"""
type RecipesConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!

  """
  A list of edges.
  """
  edges: [RecipesEdge!]

  """
  A flattened list of the nodes.
  """
  nodes: [GetRecipesType]

  """
  Identifies the total count of items in the connection.
  """
  totalCount: Int!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  Indicates whether more edges exist following the set defined by the clients arguments.
  """
  hasNextPage: Boolean!

  """
  Indicates whether more edges exist prior the set defined by the clients arguments.
  """
  hasPreviousPage: Boolean!

  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String

  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type GetRecipesType {
  image: String
  id: String!
  title: String!
}

"""
An edge in a connection.
"""
type RecipesEdge {
  """
  A cursor for use in pagination.
  """
  cursor: String!

  """
  The item at the end of the edge.
  """
  node: GetRecipesType
}

input MessageInput {
  newMessage: String!
}

type MessagePayload {
  string: String
}
